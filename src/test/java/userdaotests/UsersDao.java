/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package userdaotests;

import hibernateEntities.Users;
import main.CommonUtils;
import main.MainLogger;
import org.apache.logging.log4j.Logger;
import org.hibernate.Session;
import org.junit.Before;
import org.junit.Test;
import main.SessionPool;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;


import static org.junit.Assert.*;

public class UsersDao {

    static Session session;
    static Logger lg;

    @Before
    public void initialPreparation() throws IOException, SQLException {
        CommonUtils.cleanDB();
        CommonUtils.pushTestData();
        lg = MainLogger.getInstance();
        lg.debug("Done with pushing test data into DB");
        session = SessionPool.getInstance().openSession();
    }

    @Test public void testGetUserByID() {

        lg.debug("Users size: " + CommonUtils.users.size() + " Accounts size: " + CommonUtils.accounts.size() + " Transacs size " + CommonUtils.transacs.size());

        DAO.UsersDao usersDao = new DAO.UsersDao();
        //0 is the first record in array of users
        int tUserIndex = 0;
        //but the first record is inserted into DB and gets id = 1
        Users tUser = usersDao.get(tUserIndex + 1, session);

        assertEquals("First name", CommonUtils.users.get(tUserIndex).getUsername(), tUser.getUsername());
        assertEquals("Last name", CommonUtils.users.get(tUserIndex).getUserlastname(), tUser.getUserlastname());
        assertEquals("Email", CommonUtils.users.get(tUserIndex).getUseremail(), tUser.getUseremail());
        assertEquals("Phone", CommonUtils.users.get(tUserIndex).getUserphone(), tUser.getUserphone());

    }

    @Test public void testGetALL() {

        DAO.UsersDao usersDao = new DAO.UsersDao();
        List<Users> usersList = usersDao.getAll(session);

        for (int i = 0; i < CommonUtils.users.size(); i++) {

            assertEquals("First name", CommonUtils.users.get(i).getUsername(), usersList.get(i).getUsername());
            assertEquals("Last name", CommonUtils.users.get(i).getUserlastname(), usersList.get(i).getUserlastname());
            assertEquals("Email", CommonUtils.users.get(i).getUseremail(), usersList.get(i).getUseremail());
            assertEquals("Phone", CommonUtils.users.get(i).getUserphone(), usersList.get(i).getUserphone());

        }

    }

    @Test public void testAddUpdateDeleteUser() throws IOException, SQLException {

        DAO.UsersDao usersDao = new DAO.UsersDao();

        //Creating new user
        Users tNewUser = new Users("Valera", "Petrov", "valera_valera@342", "+6666666" );
        int tIdNewUser = usersDao.add(tNewUser, session);

        ResultSet result = CommonUtils.getUserByIDNative(tIdNewUser);
        result.last();
        int tCurrentRow = result.getRow();
        assertEquals("One and only one row is available", 1, tCurrentRow);

        assertEquals("First name", tNewUser.getUsername(), result.getString("username"));
        assertEquals("Last name", tNewUser.getUserlastname(), result.getString("userlastname"));
        assertEquals("Email", tNewUser.getUseremail(), result.getString("useremail"));
        assertEquals("Phone", tNewUser.getUserphone(), result.getString("userphone"));


        //Updating the user
        tNewUser.setUsername("Updated name");
        tNewUser.setUseremail("updated@mail.ru");
        tNewUser.setUserlastname("Updated last name");
        tNewUser.setUserphone("+7777777");
        usersDao.update(tNewUser, session);

        result = CommonUtils.getUserByIDNative(tIdNewUser);
        result.last();
        tCurrentRow = result.getRow();
        assertEquals("One and only one row is available", 1, tCurrentRow);

        assertEquals("First name", tNewUser.getUsername(), result.getString("username"));
        assertEquals("Last name", tNewUser.getUserlastname(), result.getString("userlastname"));
        assertEquals("Email", tNewUser.getUseremail(), result.getString("useremail"));
        assertEquals("Phone", tNewUser.getUserphone(), result.getString("userphone"));


        //Removing new user
        usersDao.delete(tNewUser);

        result = CommonUtils.getUserByIDNative(tIdNewUser);
        //No any records are fetched by the id
        assertFalse("There is no second row returned", result.next());

    }


}
