/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    //Hopefully should add hibernate into depencencies
    implementation 'org.hibernate:hibernate-core:5.4.22.Final'
    
    implementation 'mysql:mysql-connector-java:8.0.21'

    //To generate metamodels for Hibernate automatically
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen:5.4.22.Final'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'

    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.1'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.6'
    
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file("src/main/java/metamodels")
}

sourceSets {
    generated {
        java {
            srcDirs = ["src/main/java/metamodels"]
        }
    }
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

jar {
    manifest {
        attributes(
                'Main-Class': 'main.Starter'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}